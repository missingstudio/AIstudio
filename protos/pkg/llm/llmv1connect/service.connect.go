// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: llm/service.proto

package llmv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	llm "github.com/missingstudio/studio/protos/pkg/llm"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LLMServiceName is the fully-qualified name of the LLMService service.
	LLMServiceName = "llm.v1.LLMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LLMServiceChatCompletionsProcedure is the fully-qualified name of the LLMService's
	// ChatCompletions RPC.
	LLMServiceChatCompletionsProcedure = "/llm.v1.LLMService/ChatCompletions"
	// LLMServiceStreamChatCompletionsProcedure is the fully-qualified name of the LLMService's
	// StreamChatCompletions RPC.
	LLMServiceStreamChatCompletionsProcedure = "/llm.v1.LLMService/StreamChatCompletions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	lLMServiceServiceDescriptor                     = llm.File_llm_service_proto.Services().ByName("LLMService")
	lLMServiceChatCompletionsMethodDescriptor       = lLMServiceServiceDescriptor.Methods().ByName("ChatCompletions")
	lLMServiceStreamChatCompletionsMethodDescriptor = lLMServiceServiceDescriptor.Methods().ByName("StreamChatCompletions")
)

// LLMServiceClient is a client for the llm.v1.LLMService service.
type LLMServiceClient interface {
	ChatCompletions(context.Context, *connect.Request[llm.CompletionRequest]) (*connect.Response[llm.CompletionResponse], error)
	StreamChatCompletions(context.Context, *connect.Request[llm.CompletionRequest]) (*connect.ServerStreamForClient[llm.CompletionResponse], error)
}

// NewLLMServiceClient constructs a client for the llm.v1.LLMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLLMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LLMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lLMServiceClient{
		chatCompletions: connect.NewClient[llm.CompletionRequest, llm.CompletionResponse](
			httpClient,
			baseURL+LLMServiceChatCompletionsProcedure,
			connect.WithSchema(lLMServiceChatCompletionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamChatCompletions: connect.NewClient[llm.CompletionRequest, llm.CompletionResponse](
			httpClient,
			baseURL+LLMServiceStreamChatCompletionsProcedure,
			connect.WithSchema(lLMServiceStreamChatCompletionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// lLMServiceClient implements LLMServiceClient.
type lLMServiceClient struct {
	chatCompletions       *connect.Client[llm.CompletionRequest, llm.CompletionResponse]
	streamChatCompletions *connect.Client[llm.CompletionRequest, llm.CompletionResponse]
}

// ChatCompletions calls llm.v1.LLMService.ChatCompletions.
func (c *lLMServiceClient) ChatCompletions(ctx context.Context, req *connect.Request[llm.CompletionRequest]) (*connect.Response[llm.CompletionResponse], error) {
	return c.chatCompletions.CallUnary(ctx, req)
}

// StreamChatCompletions calls llm.v1.LLMService.StreamChatCompletions.
func (c *lLMServiceClient) StreamChatCompletions(ctx context.Context, req *connect.Request[llm.CompletionRequest]) (*connect.ServerStreamForClient[llm.CompletionResponse], error) {
	return c.streamChatCompletions.CallServerStream(ctx, req)
}

// LLMServiceHandler is an implementation of the llm.v1.LLMService service.
type LLMServiceHandler interface {
	ChatCompletions(context.Context, *connect.Request[llm.CompletionRequest]) (*connect.Response[llm.CompletionResponse], error)
	StreamChatCompletions(context.Context, *connect.Request[llm.CompletionRequest], *connect.ServerStream[llm.CompletionResponse]) error
}

// NewLLMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLLMServiceHandler(svc LLMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lLMServiceChatCompletionsHandler := connect.NewUnaryHandler(
		LLMServiceChatCompletionsProcedure,
		svc.ChatCompletions,
		connect.WithSchema(lLMServiceChatCompletionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceStreamChatCompletionsHandler := connect.NewServerStreamHandler(
		LLMServiceStreamChatCompletionsProcedure,
		svc.StreamChatCompletions,
		connect.WithSchema(lLMServiceStreamChatCompletionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/llm.v1.LLMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LLMServiceChatCompletionsProcedure:
			lLMServiceChatCompletionsHandler.ServeHTTP(w, r)
		case LLMServiceStreamChatCompletionsProcedure:
			lLMServiceStreamChatCompletionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLLMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLLMServiceHandler struct{}

func (UnimplementedLLMServiceHandler) ChatCompletions(context.Context, *connect.Request[llm.CompletionRequest]) (*connect.Response[llm.CompletionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.ChatCompletions is not implemented"))
}

func (UnimplementedLLMServiceHandler) StreamChatCompletions(context.Context, *connect.Request[llm.CompletionRequest], *connect.ServerStream[llm.CompletionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.StreamChatCompletions is not implemented"))
}
