// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: llm/service.proto

package llmv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	llm "github.com/missingstudio/studio/protos/pkg/llm"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LLMServiceName is the fully-qualified name of the LLMService service.
	LLMServiceName = "llm.v1.LLMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LLMServiceGetChatCompletionsProcedure is the fully-qualified name of the LLMService's
	// GetChatCompletions RPC.
	LLMServiceGetChatCompletionsProcedure = "/llm.v1.LLMService/GetChatCompletions"
	// LLMServiceGetStreamChatCompletionsProcedure is the fully-qualified name of the LLMService's
	// GetStreamChatCompletions RPC.
	LLMServiceGetStreamChatCompletionsProcedure = "/llm.v1.LLMService/GetStreamChatCompletions"
	// LLMServiceListModelsProcedure is the fully-qualified name of the LLMService's ListModels RPC.
	LLMServiceListModelsProcedure = "/llm.v1.LLMService/ListModels"
	// LLMServiceListProvidersProcedure is the fully-qualified name of the LLMService's ListProviders
	// RPC.
	LLMServiceListProvidersProcedure = "/llm.v1.LLMService/ListProviders"
	// LLMServiceGetProviderProcedure is the fully-qualified name of the LLMService's GetProvider RPC.
	LLMServiceGetProviderProcedure = "/llm.v1.LLMService/GetProvider"
	// LLMServiceUpdateProviderProcedure is the fully-qualified name of the LLMService's UpdateProvider
	// RPC.
	LLMServiceUpdateProviderProcedure = "/llm.v1.LLMService/UpdateProvider"
	// LLMServiceGetProviderConfigProcedure is the fully-qualified name of the LLMService's
	// GetProviderConfig RPC.
	LLMServiceGetProviderConfigProcedure = "/llm.v1.LLMService/GetProviderConfig"
	// LLMServiceListTrackingLogsProcedure is the fully-qualified name of the LLMService's
	// ListTrackingLogs RPC.
	LLMServiceListTrackingLogsProcedure = "/llm.v1.LLMService/ListTrackingLogs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	lLMServiceServiceDescriptor                        = llm.File_llm_service_proto.Services().ByName("LLMService")
	lLMServiceGetChatCompletionsMethodDescriptor       = lLMServiceServiceDescriptor.Methods().ByName("GetChatCompletions")
	lLMServiceGetStreamChatCompletionsMethodDescriptor = lLMServiceServiceDescriptor.Methods().ByName("GetStreamChatCompletions")
	lLMServiceListModelsMethodDescriptor               = lLMServiceServiceDescriptor.Methods().ByName("ListModels")
	lLMServiceListProvidersMethodDescriptor            = lLMServiceServiceDescriptor.Methods().ByName("ListProviders")
	lLMServiceGetProviderMethodDescriptor              = lLMServiceServiceDescriptor.Methods().ByName("GetProvider")
	lLMServiceUpdateProviderMethodDescriptor           = lLMServiceServiceDescriptor.Methods().ByName("UpdateProvider")
	lLMServiceGetProviderConfigMethodDescriptor        = lLMServiceServiceDescriptor.Methods().ByName("GetProviderConfig")
	lLMServiceListTrackingLogsMethodDescriptor         = lLMServiceServiceDescriptor.Methods().ByName("ListTrackingLogs")
)

// LLMServiceClient is a client for the llm.v1.LLMService service.
type LLMServiceClient interface {
	GetChatCompletions(context.Context, *connect.Request[llm.ChatCompletionRequest]) (*connect.Response[llm.ChatCompletionResponse], error)
	GetStreamChatCompletions(context.Context, *connect.Request[llm.ChatCompletionRequest]) (*connect.ServerStreamForClient[llm.ChatCompletionResponse], error)
	ListModels(context.Context, *connect.Request[llm.ModelRequest]) (*connect.Response[llm.ModelResponse], error)
	ListProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[llm.ProvidersResponse], error)
	GetProvider(context.Context, *connect.Request[llm.GetProviderRequest]) (*connect.Response[llm.GetProviderResponse], error)
	UpdateProvider(context.Context, *connect.Request[llm.UpdateProviderRequest]) (*connect.Response[llm.UpdateProviderResponse], error)
	GetProviderConfig(context.Context, *connect.Request[llm.GetProviderConfigRequest]) (*connect.Response[llm.GetProviderConfigResponse], error)
	ListTrackingLogs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[llm.LogResponse], error)
}

// NewLLMServiceClient constructs a client for the llm.v1.LLMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLLMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LLMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lLMServiceClient{
		getChatCompletions: connect.NewClient[llm.ChatCompletionRequest, llm.ChatCompletionResponse](
			httpClient,
			baseURL+LLMServiceGetChatCompletionsProcedure,
			connect.WithSchema(lLMServiceGetChatCompletionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStreamChatCompletions: connect.NewClient[llm.ChatCompletionRequest, llm.ChatCompletionResponse](
			httpClient,
			baseURL+LLMServiceGetStreamChatCompletionsProcedure,
			connect.WithSchema(lLMServiceGetStreamChatCompletionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listModels: connect.NewClient[llm.ModelRequest, llm.ModelResponse](
			httpClient,
			baseURL+LLMServiceListModelsProcedure,
			connect.WithSchema(lLMServiceListModelsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProviders: connect.NewClient[emptypb.Empty, llm.ProvidersResponse](
			httpClient,
			baseURL+LLMServiceListProvidersProcedure,
			connect.WithSchema(lLMServiceListProvidersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProvider: connect.NewClient[llm.GetProviderRequest, llm.GetProviderResponse](
			httpClient,
			baseURL+LLMServiceGetProviderProcedure,
			connect.WithSchema(lLMServiceGetProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProvider: connect.NewClient[llm.UpdateProviderRequest, llm.UpdateProviderResponse](
			httpClient,
			baseURL+LLMServiceUpdateProviderProcedure,
			connect.WithSchema(lLMServiceUpdateProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProviderConfig: connect.NewClient[llm.GetProviderConfigRequest, llm.GetProviderConfigResponse](
			httpClient,
			baseURL+LLMServiceGetProviderConfigProcedure,
			connect.WithSchema(lLMServiceGetProviderConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTrackingLogs: connect.NewClient[emptypb.Empty, llm.LogResponse](
			httpClient,
			baseURL+LLMServiceListTrackingLogsProcedure,
			connect.WithSchema(lLMServiceListTrackingLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// lLMServiceClient implements LLMServiceClient.
type lLMServiceClient struct {
	getChatCompletions       *connect.Client[llm.ChatCompletionRequest, llm.ChatCompletionResponse]
	getStreamChatCompletions *connect.Client[llm.ChatCompletionRequest, llm.ChatCompletionResponse]
	listModels               *connect.Client[llm.ModelRequest, llm.ModelResponse]
	listProviders            *connect.Client[emptypb.Empty, llm.ProvidersResponse]
	getProvider              *connect.Client[llm.GetProviderRequest, llm.GetProviderResponse]
	updateProvider           *connect.Client[llm.UpdateProviderRequest, llm.UpdateProviderResponse]
	getProviderConfig        *connect.Client[llm.GetProviderConfigRequest, llm.GetProviderConfigResponse]
	listTrackingLogs         *connect.Client[emptypb.Empty, llm.LogResponse]
}

// GetChatCompletions calls llm.v1.LLMService.GetChatCompletions.
func (c *lLMServiceClient) GetChatCompletions(ctx context.Context, req *connect.Request[llm.ChatCompletionRequest]) (*connect.Response[llm.ChatCompletionResponse], error) {
	return c.getChatCompletions.CallUnary(ctx, req)
}

// GetStreamChatCompletions calls llm.v1.LLMService.GetStreamChatCompletions.
func (c *lLMServiceClient) GetStreamChatCompletions(ctx context.Context, req *connect.Request[llm.ChatCompletionRequest]) (*connect.ServerStreamForClient[llm.ChatCompletionResponse], error) {
	return c.getStreamChatCompletions.CallServerStream(ctx, req)
}

// ListModels calls llm.v1.LLMService.ListModels.
func (c *lLMServiceClient) ListModels(ctx context.Context, req *connect.Request[llm.ModelRequest]) (*connect.Response[llm.ModelResponse], error) {
	return c.listModels.CallUnary(ctx, req)
}

// ListProviders calls llm.v1.LLMService.ListProviders.
func (c *lLMServiceClient) ListProviders(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[llm.ProvidersResponse], error) {
	return c.listProviders.CallUnary(ctx, req)
}

// GetProvider calls llm.v1.LLMService.GetProvider.
func (c *lLMServiceClient) GetProvider(ctx context.Context, req *connect.Request[llm.GetProviderRequest]) (*connect.Response[llm.GetProviderResponse], error) {
	return c.getProvider.CallUnary(ctx, req)
}

// UpdateProvider calls llm.v1.LLMService.UpdateProvider.
func (c *lLMServiceClient) UpdateProvider(ctx context.Context, req *connect.Request[llm.UpdateProviderRequest]) (*connect.Response[llm.UpdateProviderResponse], error) {
	return c.updateProvider.CallUnary(ctx, req)
}

// GetProviderConfig calls llm.v1.LLMService.GetProviderConfig.
func (c *lLMServiceClient) GetProviderConfig(ctx context.Context, req *connect.Request[llm.GetProviderConfigRequest]) (*connect.Response[llm.GetProviderConfigResponse], error) {
	return c.getProviderConfig.CallUnary(ctx, req)
}

// ListTrackingLogs calls llm.v1.LLMService.ListTrackingLogs.
func (c *lLMServiceClient) ListTrackingLogs(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[llm.LogResponse], error) {
	return c.listTrackingLogs.CallUnary(ctx, req)
}

// LLMServiceHandler is an implementation of the llm.v1.LLMService service.
type LLMServiceHandler interface {
	GetChatCompletions(context.Context, *connect.Request[llm.ChatCompletionRequest]) (*connect.Response[llm.ChatCompletionResponse], error)
	GetStreamChatCompletions(context.Context, *connect.Request[llm.ChatCompletionRequest], *connect.ServerStream[llm.ChatCompletionResponse]) error
	ListModels(context.Context, *connect.Request[llm.ModelRequest]) (*connect.Response[llm.ModelResponse], error)
	ListProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[llm.ProvidersResponse], error)
	GetProvider(context.Context, *connect.Request[llm.GetProviderRequest]) (*connect.Response[llm.GetProviderResponse], error)
	UpdateProvider(context.Context, *connect.Request[llm.UpdateProviderRequest]) (*connect.Response[llm.UpdateProviderResponse], error)
	GetProviderConfig(context.Context, *connect.Request[llm.GetProviderConfigRequest]) (*connect.Response[llm.GetProviderConfigResponse], error)
	ListTrackingLogs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[llm.LogResponse], error)
}

// NewLLMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLLMServiceHandler(svc LLMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lLMServiceGetChatCompletionsHandler := connect.NewUnaryHandler(
		LLMServiceGetChatCompletionsProcedure,
		svc.GetChatCompletions,
		connect.WithSchema(lLMServiceGetChatCompletionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceGetStreamChatCompletionsHandler := connect.NewServerStreamHandler(
		LLMServiceGetStreamChatCompletionsProcedure,
		svc.GetStreamChatCompletions,
		connect.WithSchema(lLMServiceGetStreamChatCompletionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceListModelsHandler := connect.NewUnaryHandler(
		LLMServiceListModelsProcedure,
		svc.ListModels,
		connect.WithSchema(lLMServiceListModelsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceListProvidersHandler := connect.NewUnaryHandler(
		LLMServiceListProvidersProcedure,
		svc.ListProviders,
		connect.WithSchema(lLMServiceListProvidersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceGetProviderHandler := connect.NewUnaryHandler(
		LLMServiceGetProviderProcedure,
		svc.GetProvider,
		connect.WithSchema(lLMServiceGetProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceUpdateProviderHandler := connect.NewUnaryHandler(
		LLMServiceUpdateProviderProcedure,
		svc.UpdateProvider,
		connect.WithSchema(lLMServiceUpdateProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceGetProviderConfigHandler := connect.NewUnaryHandler(
		LLMServiceGetProviderConfigProcedure,
		svc.GetProviderConfig,
		connect.WithSchema(lLMServiceGetProviderConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	lLMServiceListTrackingLogsHandler := connect.NewUnaryHandler(
		LLMServiceListTrackingLogsProcedure,
		svc.ListTrackingLogs,
		connect.WithSchema(lLMServiceListTrackingLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/llm.v1.LLMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LLMServiceGetChatCompletionsProcedure:
			lLMServiceGetChatCompletionsHandler.ServeHTTP(w, r)
		case LLMServiceGetStreamChatCompletionsProcedure:
			lLMServiceGetStreamChatCompletionsHandler.ServeHTTP(w, r)
		case LLMServiceListModelsProcedure:
			lLMServiceListModelsHandler.ServeHTTP(w, r)
		case LLMServiceListProvidersProcedure:
			lLMServiceListProvidersHandler.ServeHTTP(w, r)
		case LLMServiceGetProviderProcedure:
			lLMServiceGetProviderHandler.ServeHTTP(w, r)
		case LLMServiceUpdateProviderProcedure:
			lLMServiceUpdateProviderHandler.ServeHTTP(w, r)
		case LLMServiceGetProviderConfigProcedure:
			lLMServiceGetProviderConfigHandler.ServeHTTP(w, r)
		case LLMServiceListTrackingLogsProcedure:
			lLMServiceListTrackingLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLLMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLLMServiceHandler struct{}

func (UnimplementedLLMServiceHandler) GetChatCompletions(context.Context, *connect.Request[llm.ChatCompletionRequest]) (*connect.Response[llm.ChatCompletionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.GetChatCompletions is not implemented"))
}

func (UnimplementedLLMServiceHandler) GetStreamChatCompletions(context.Context, *connect.Request[llm.ChatCompletionRequest], *connect.ServerStream[llm.ChatCompletionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.GetStreamChatCompletions is not implemented"))
}

func (UnimplementedLLMServiceHandler) ListModels(context.Context, *connect.Request[llm.ModelRequest]) (*connect.Response[llm.ModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.ListModels is not implemented"))
}

func (UnimplementedLLMServiceHandler) ListProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[llm.ProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.ListProviders is not implemented"))
}

func (UnimplementedLLMServiceHandler) GetProvider(context.Context, *connect.Request[llm.GetProviderRequest]) (*connect.Response[llm.GetProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.GetProvider is not implemented"))
}

func (UnimplementedLLMServiceHandler) UpdateProvider(context.Context, *connect.Request[llm.UpdateProviderRequest]) (*connect.Response[llm.UpdateProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.UpdateProvider is not implemented"))
}

func (UnimplementedLLMServiceHandler) GetProviderConfig(context.Context, *connect.Request[llm.GetProviderConfigRequest]) (*connect.Response[llm.GetProviderConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.GetProviderConfig is not implemented"))
}

func (UnimplementedLLMServiceHandler) ListTrackingLogs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[llm.LogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v1.LLMService.ListTrackingLogs is not implemented"))
}
